#!/bin/sh
# This script is only used for developement. It is removed by the
# distribution process.

set -e

OCAMLBUILD=${OCAMLBUILD:="ocamlbuild -tag debug -classic-display \
                          -use-ocamlfind -cflags -warn-error,+A" }

# hack to avoid depending on result package
RESULT="src/core.ml src/core.mli"
V=$(ocamlc -version)
MAJOR=$(echo $V | cut -d '.' -f 1)
MINOR=$(echo $V | cut -d '.' -f 2)
if [ $MAJOR -ge 4 -a $MINOR -ge 3 ] ; then
    for x in $RESULT ; do
        cat $x | grep -v "type ('a, 'b) result" > $x.tmp
        mv $x.tmp $x
    done
fi

action ()
{
    case $1 in
        default) action lib ; action bin ; action test ;;
        bin) action lib ; $OCAMLBUILD app/conex.native ; $OCAMLBUILD app/conex_verify.native ;;
        lib) $OCAMLBUILD conex.cmx conex.cmxa ;;
        test) action lib ; $OCAMLBUILD test/tests.native ; ./tests.native -q ;;
        coverage)
            action clean ;
            export OCAMLBUILD="$OCAMLBUILD -pkg bisect_ppx" ;
            action lib ;
            $OCAMLBUILD test/tests.native ;
            ./tests.native ;
            bisect-ppx-report -I _build/ -html coverage/ bisect0001.out ;;
        clean) $OCAMLBUILD -clean ; rm -rf _tests ; rm -f tests.native ; rm -f conex.native ; rm -rf coverage ; rm -f bisect*out ;;
        *) $OCAMLBUILD $* ;;
    esac
}

if [ $# -eq 0 ];
then action default ;
else action $*; fi

# hack to avoid depending on result package
if [ $MAJOR -ge 4 -a $MINOR -ge 3 ] ; then
    for x in $RESULT ; do
        echo "type ('a, 'b) result = Ok of 'a | Error of 'b" > $x.tmp
        cat $x >> $x.tmp
        mv $x.tmp $x
    done
fi
